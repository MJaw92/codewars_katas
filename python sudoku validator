#example of board, should return true
board = [[5, 3, 4, 6, 7, 8, 9, 1, 2], 
         [6, 7, 2, 1, 9, 5, 3, 4, 8],
         [1, 9, 8, 3, 4, 2, 5, 6, 7],
         [8, 5, 9, 7, 6, 1, 4, 2, 3],
         [4, 2, 6, 8, 5, 3, 7, 9, 1],
         [7, 1, 3, 9, 2, 4, 8, 5, 6],
         [9, 6, 1, 5, 3, 7, 2, 8, 4],
         [2, 8, 7, 4, 1, 9, 6, 3, 5],
         [3, 4, 5, 2, 8, 6, 1, 7, 9]]

#this board is invalid, false should be returned
board1 = [[5, 3, 4, 6, 7, 8, 9, 1, 2], 
          [6, 7, 2, 1, 9, 0, 3, 4, 9],
          [1, 0, 0, 3, 4, 2, 5, 6, 0],
          [8, 5, 9, 7, 6, 1, 0, 2, 0],
          [4, 2, 6, 8, 5, 3, 7, 9, 1],
          [7, 1, 3, 9, 2, 4, 8, 5, 6],
          [9, 0, 1, 5, 3, 7, 2, 1, 4],
          [2, 8, 7, 4, 1, 9, 6, 3, 5],
          [3, 0, 0, 4, 8, 1, 1, 7, 9]]

def validSolution(board):
  #sum of rows and columns
  sumr = sumc = 0
  #sum of squares
  sumsq = [0, 0, 0]
  #iterating through every single row
  for n in range (0, len(board) ):
    #and every column
    for m in range (0, len(board) ):
      #need to check if every number in our sudoku is valid
      r = range(1, 10)
      if board[n][m] not in r or board[m][n] not in r: return False
      #adding numbers one by one to check column and row sums
      sumr += board[n][m]
      sumc += board[m][n]
      #adding numbers to valide square correctness
      sumsq[m//3] += board[n][m]
    #every row and column should be equal to 45 (1 + 2 + ... + 9)
    if sumc != 45 or sumr != 45: return False
    #if it is okay, make variables equal to 0 again
    else: sumr = sumc = 0
    #after going through 3 rows, check if every square sums up to 45
    if n % 3 == 2:
      for i in sumsq:
        if i != 45: return False
      #and clear the variable
      sumsq = [0, 0, 0]    
    #if all tests pass, return True
    return True
